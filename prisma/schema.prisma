generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  ARTIST
}

enum ArtistStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  favourites Favourite[]
  playlists  Playlist[]
  library    Library?
  tokens     Token[]

  @@index([email])
  @@index([role])
}

model Artist {
  id          String       @id @default(uuid())
  name        String       @unique
  email       String       @unique
  password    String
  description String?
  group       String?
  image       String?
  subscribers Int          @default(0) // Number of subscribers/followers
  status      ArtistStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  role        UserRole     @default(ARTIST)

  // Relations
  albums    Album[]
  songs     Song[]
  tokens    Token[]
  Libraries Library[]

  @@index([name, email])
  @@index([status])
}

model Album {
  id          String    @id @default(uuid())
  title       String
  artistId    String
  releaseDate DateTime?
  coverImage  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  artist     Artist     @relation(fields: [artistId], references: [id], onDelete: Cascade)
  songs      Song[]
  playlists  Playlist[]
  playlistId String?
  Libraries  Library[]

  @@index([artistId])
  @@index([releaseDate])
  @@index([title])
}

model Song {
  id            String    @id @default(uuid())
  title         String
  artistId      String
  albumId       String?
  url           String // Made required - core field for streaming
  duration      Int? // Duration in seconds
  lyrics        String?
  coverImage    String?
  releaseDate   DateTime?
  playCount     Int       @default(0) // Count of how many times the song has been played
  albumPosition Int? // Order of songs in album, if applicable
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  artist     Artist      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  album      Album?      @relation(fields: [albumId], references: [id], onDelete: SetNull)
  favourites Favourite[]
  playlists  Playlist[]
  Libraries  Library[]

  @@index([artistId])
  @@index([albumId])
  @@index([title])
  @@index([releaseDate])
}

model Favourite {
  id        String   @id @default(uuid())
  userId    String
  songId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@index([userId])
  @@index([songId])
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  userId      String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs     Song[]
  albums    Album[]
  libraries Library[]

  @@index([userId])
  @@index([isPublic])
}

model Library {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  songs     Song[]
  albums    Album[]
  artists   Artist[]
  playlists Playlist[]

  @@unique([userId])
  @@index([userId])
}

model Token {
  id        String   @id @default(uuid())
  userId    String?
  artistId  String?
  token     String   @unique
  userAgent String?
  ipAddress String?
  expiresIn Int
  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  artist Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@index([token])
}
